#include <iostream>
#include <bits/stdc++.h>

 using namespace std;



 struct node
 {
    int leftmaxsum;
    int rightmaxsum;
    int maxsum;
    int totalsum;
    node()
    {
         leftmaxsum= rightmaxsum =maxsum =totalsum= -15009;

    }
 };
 vector<struct node> tree;
struct node mergetree(struct node lc,struct node rc)
 {
     struct node parentnode;
     parentnode.leftmaxsum=max(lc.leftmaxsum,lc.totalsum+rc.leftmaxsum);
     parentnode.rightmaxsum=max(rc.rightmaxsum,rc.totalsum+lc.rightmaxsum);
     parentnode.maxsum=max(max(lc.maxsum,rc.maxsum),lc.rightmaxsum+rc.leftmaxsum);
     parentnode.totalsum=lc.totalsum+rc.totalsum;
     return parentnode;

 }
 void build(int node,int start,int endt,int* a)
 {

     if(start==endt)
     {
         tree[node].leftmaxsum=a[start];
         tree[node].rightmaxsum=a[start];
         tree[node].maxsum=a[start];
         tree[node].totalsum=a[start];
     }
     else
     {
         int mid=(start+endt)/2;
         build(2*node+1,start,mid,a);
         build(2*node+2,mid+1,endt,a);
         tree[node]=mergetree(tree[2*node+1],tree[2*node+2]);

 }
 }

 struct node query(int l,int r,int start,int endt,int node,int* a){
     struct node nullnode;
     if(start>r||endt<l)
     return nullnode;
     else if(l<=start&&r>=endt)
     {
         return tree[node];
     }
     int mid= (start+endt)/2;
     struct node p1= query(l,r,start,mid,2*node+1,a);
     struct node p2= query(l,r,mid+1,endt,2*node+2,a);

     struct node finalnode=mergetree(p1,p2);
     return finalnode;
 }

 int main()
 {

         int N;
         scanf(" %d",&N);
    int a[N];
    int x = (int)(ceil(log2(N)));
    int max_size = 2 * (int)pow(2, x) - 1;
    tree.resize(max_size);
         for(int i=0;i<N;i++)
            scanf(" %d",&a[i]);
         int start=0,endt=N-1,node=0;
         build(node,start,endt,a);

          int l,r,M;
         scanf(" %d",&M);
         for(int j=0;j<M;j++)
         {
         scanf(" %d %d",&l,&r);
         node=0,start=0,endt=N-1;
         struct node c=query(l-1,r-1,start,endt,node,a);
         printf("%d\n",c.maxsum);
         }


 }

